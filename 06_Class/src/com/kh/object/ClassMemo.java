package com.kh.object;

public class ClassMemo {
	/*
	 * 클래스(객체) = 변수(데이터) + 메소드(기능)
	 * : 객체의 속성(데이터)과 기능을 코드로 구현한 것
	 * 
	 * * 객체? 객관적으로 실존하는 모든 실체(물질)
	 *        식별 가능한 개체 또는 사물.
	 *        눈 앞에 보이는 또는 만질 수 있는 구체적인 사물일 수도 있고,
	 *        시간과 공기처럼 추상적인 개념일 수도 있다.
	 *        
	 * - 클래스 사용하는 이유?
	 *   : 다양한 자료형의 값들을 한 공간에 보관할 수 있음
	 *   
	 * - 객체를 클래스로 표현하기 위해 "추상화 과정"
	 *   : 객체에 필요한 데이터와 기능(동작)을 정리하는 과정
	 *   [1] 필요성 상관없이 떠오르는 모든 것들을 나열. 모든 정보 취합.
	 *   [2] 구현할 프로그램에서 불필요한 항목 제거
	 *   [3] 정리된 내용을 변수와 메소드로 정의
	 *   
	 * - 메소드: 하나의 기능을 수행하는 코드
	 * [작성방법]
	 * 접근제한자 [예약어] 반환형 메소드명(매개변수,...) {
	 * 		// 제공할 기능을 수행할 코드
	 * }
	 * - 메소드명: 메소드가 호출될 때 사용되는 이름
	 * - 매개변수: 메소드에서 내부적으로 사용하기 위해 전달 받는 변수
	 *           생략 가능.
	 * - 반환형: 메소드 내 코드 수행 후 전달할 값에 대한 자료형 또는 형태
	 *   * 반환 결과 없는 경우: void
	 *   * 반환 결과 있는 경우: 자료형(int, char,..), 
	 *                      참조자료형(String, Integer,..),
	 *                      클래스, ...
	 * - 반환 값: 메소드 수행 후 결과 값. return 키워드와 함께 사용.
	 *   ※ return 키워드의 2가지 기능
	 *     (1) 결과 값을 전달: return 키워드 우측에 전달할 값 작성.
	 *         ex) return 10;
	 *     (2) 메소드 종료: return 키워드 작성 후 세미콜론.
	 *         ex) return;
	 *         
	 * - 접근제한자
	 *  : 클래스 내부의 변수나 메소드, 생성자에 대한 접근 권한을 지정하는 것.
	 *    접근할 수 있는 범위를 제한하는 것.
	 *  * public > protected > default > private
	 *  [1] public : 외부 클래스, 외부 패키지에서 접근 가능
	 *  [2] protected : 같은 패키지 내 상속 관계의 클래스에서만 접근 가능
	 *  [3] default : 같은 패키지 내 접근 가능. 생략 가능.
	 *  [4] private : 같은 클래스 내 접근 가능.
	 *      클래스 내부에서 사용할 변수나 메소드를 외부에서 접근하지 못하도록 하는 것
	 *      => 정보은닉
	 *  - 캡슐화 : 데이터의 직접 접근을 막고 간접적으로 처리할 메소드를
	 *           클래스 내부에 작성하여 관리하는 방법
	 *    [1] private 변수 선언
	 *    [2] getter/setter 메소드 정의
	 *        * getter 메소드 : 해당 변수에 담긴 값을 반환해주는 기능
	 *        * setter 메소드 : 해당 변수에 대입하고자 하는 값을 전달받아
	 *                        해당 변수에 대입을 시켜주는 기능
	 *                        
	 * - static 예약어(키워드)
	 * [특징]
	 *   * 데이터 공유가 가능하다.
	 *   * 메모리에 한번 할당되어 프로그램 종료 시 메모리 해제
	 *   * 인스턴스 생성 없이 메소드 호출 가능
	 *     ex) Math.random()
	 *     
	 * - 변수 유효 범위
	 *  : 선언되는 범위에 따라 유효 범위(scope)가 달라짐.
	 *  [1] 지역 변수: 메소드 안에서만 사용할 수 있는 변수
	 *               스택 메모리에 저장됨
	 *  [2] 멤버 변수: 클래스 안에서 사용하는 변수
	 *               클래스가 생성될 때 힙 메모리에 생성됨
	 *  [3] static 변수 : 여러 인스턴스에서 공통으로 사용할 수 있는 변수
	 *                   클래스 생성 상관없이 처음부터 
	 *                     static 데이터 영역 메모리에 생성됨
	 * - 싱글톤패턴 : 인스턴스를 단 하나만 생성하는 클래스 (디자인패턴)
	 *   [정의하는 방법]
	 *   [1] 생성자를 private으로 지정
	 *       => 기본 값이 public이므로 외부 클래스에서 여러 개를 생성할 수 있어
	 *          클래스 내부에서만 제어하기 위해 private으로 변경
	 *   [2] 클래스 내부에 static 인스턴스 생성
	 *   	 => 인스턴스가 하나는 있어야 사용이 가능하므로 유일한 인스턴스 생성을 위해
	 *          static으로 생성
	 *   [3] 외부에서 접근 가능한 public 메소드 생성
	 *       => 생성한 하나의 인스턴스를 외부에서도 사용할 수 있게 하기 위해
	 *          public 메소드 생성
	 *          또한, static으로 선언하여 인스턴스 생성과 상관없이 호출할 수 있도록 함
	 */
}















